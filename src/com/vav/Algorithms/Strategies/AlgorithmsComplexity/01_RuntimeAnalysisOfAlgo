Runtime Analysis:

1.  Its the process of analysing how to runtime/execution time increases with the size of the problem(Input).
2.  Execution time is not a good measure of comparing algorithms.
3.  We also cannot count the statements executed as the execution time as it differs from one programming language to
    other.
*** The ideal solution is to define an algorithm as a function that is independent of machine and the language.
4.  We define Runtime of the algorithm as a function of size of the problem. So if there are two different algorithms
    and we draw both of them keeping the size of the problem on the x axis and runtime on y axis we can compare them.
    The algorithm which has lesser runtime for a specific(Usually very large) size of the problem wins.
5.  The reason we use very large input is because it gives us worst case of an algorithm.
6.  Big O, Big theta and Big omega are the values of a single algorithm at some N0. This means an algorithm can take different
    outputs on the basis of different inputs of same size N0
7.  To compare different algorithms we can compare their asymptotic values for same input N0.
8.  Note that all the inputs at N0 may not have the same probability, in this case we assume that they are equally likely.

Rate of Growth:

1.  The rate at which runtime increases as a function of input(problem size). This is the rate of growth function.

Some general rate of growths:

1 - Constant - Addition, substraction.
logN - logarithmic - the problems that gets half each iteration, e.g. finding element in sorted array
N - Linear - Finding an element in an unsorted array.
NlogN - LinearLogarithmic - MergeSort
N^2 - Quadratic - bubblesort
N^3 - Cubic - Matrix multiplication
2^N - Exponential

Types of Analysis:

We need to see in which case an algorithm is taking least time and in which case its taking more time.
The former is called the "best case" and later is called "worst case".

1.  Worst Case: Defines the input when the algorithm runs the slowest.
2.  Best Case: Defines the input when the algorithm runs the fastest.
3.  Average Case: Computes the average runtime by averaging over times taken in various runs.


*** If we have 2 variables like int i=0,j=0;
while(i<n){
    i++;
    while(j<n){
    j++
    }
}
Then algorithms complexity will be n not n^2 because i and j are two different variables incrementing in two different loops.


So how to compare two algorithms?

****Because big theta notation is the tight upper bound of f(n) we know that an algorithm can perform as worse as this
    so we can compare their rate of growth and big theta. Note that we can compare big O but big O does not give a tight upper bound so
    it may not be best to compare algorithms but is good to measure its worst case.