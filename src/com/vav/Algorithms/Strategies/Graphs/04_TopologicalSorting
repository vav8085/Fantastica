Topological Sorting:
1.  Sometimes we need sorting our graph in the order of vertex values, The
    example can be sorting the courses in the order in which they can be taken
    or the order in which we need to use parts to build a car or any object.
    The sorting is called Topological Sort.
2.  We sort items by :
    A.  Finding the vertex that has no successors(no next vertices that it points to).
    B.  Delete this vertex and insert it to the first position.
    C.  Keep repeating it until there are no more vertices left.
        The final output will be the topologically sorted array.
    *   This will need deleting the vertex from vertex array and moving all the vertices
        one space to right to fill up the space.
    *   This will also need rearranging the adjacency matrix.

3.  Instead of deleting we can also create new arrays for adjacency matrix and vertices and then use new arrays
    in place of original one once topological sorting is complete.

4.  To find the vertex that has no successor we use two loops and for every vertex in row we check every column
    in the adjacency matrix to find a 1. If we find a 1 then we break inner loop and immediately go to the next row and keep doing it.
    *   If in case we find any row for which all columns are 0 then we return this row saying that its the vertex with
    no successors.
    *   If we do not find a noSuccessor vertex then we consider that the graph is cyclic.

*** Topological sorting can only be done in directed acyclic graphs(DAG).
*** You should always find if a graph is a DAG first and then try topological sorting on it. If there is a cycle then topological sorting will
    not work.
*** A single graph can be topologically sorted in multiple ways.

    Precedence scheduling(Like which course to take first) is a good example of topological sorting in a directed graph.


