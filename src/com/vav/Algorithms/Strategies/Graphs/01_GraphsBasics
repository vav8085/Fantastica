GraphsBasics:
1.  In Graphs nodes are called vertices.
2.  Two vertices are adjacent if they are connected with each other with a single edge.
3.  Path is a connection between any two vertices in a graph, it can consist of additional vertices.

Connected Graph:    A Graph is connected if there exist at least one path from one vertex to another.
                    All points on two parallel lines make a non-connected graph.

Directed Graph:     In non directed graph we can go in any direction but in directed graphs edges are
                    marked with directional arrows and we can parse in only direction of arrows not reverse.

Weighted Graphs:    In some cases we have a number given to every edges, these numbers are called weights.
                    Weights define properties like distance, time taken to travel etc.

Representing Graph:
    1.  Vertices:   Vertices are usually represented with Objects. THe object can have various information
                    about vertices like visited flag, label etc. Vertices can be stored in an Array and can
                    be referenced using its index.
    2.  Edges:      We can represent edges as NxN arrays called adjacency matrix.
                    *   If an edge is present between two vertices its represented as 1
                    *   If no edge is present its represented by a 0
                            A B C D
                        A   0 1 1 1
                        B   1 0 1 1
                        C   1 1 0 1
                        D   1 1 1 0
                    *   Note that the identity diagonal is all 0s. This is because a vertex does not connect to itself.
                    *   The values above the identity diagonal are same as values below it for undirected graph.
                    *   We always make 2 entries in an adjacency matrix for every new vertex added.
                        We can also represent edges as a list called adjacency list.
                    *   Adjacency list is a linked list that shows to which nodes current node is connected.
                        A   B->C->D
                        B   A->D
                        C   A
                        D   A->B
    3.  The Vertex class:
        The vertex class just has the data and a pointer called isVisited that determines whether the vertex is visited or not.
    4.  The Graph class has:
            a.  a vertex array that is used to save any new vertex added to the graph.
            b.  a final variable with count of total number of vertices that can be in graph.
            c.  a variable that has the current count of vertices in the graph.
            d.  a two dimensional array that has 1s and 0s. This is called the adjacency matrix that is used to add the edges
                in the graph.
            e.  Notice that the adjacency matrix and vertex array store different values. The vertex array store an array of type Vertex
                while the adjacency matrix store integers in range (0,1). To map these values and to know which vertex is at
                which position in the array we can also use a symbol table. This way we can identify the index of a certain
                vertex in the vertex array that will match with adjacency matrix.

4.  If we want to know in what order our vertices are connected with each other and we want to parse all the vertices we can use
    various techniques like Depth first search and Breadth first search. Both techniques parse all the vertices but in a different
    sequence. They have different utilities.

****Keep the data structure in a separate class from various problems that you can solve using it. Just like java collections class.

5.  Depth First Search(DFS):
    a.  In DFS we keep parsing the next vertices until we reach a dead end or we notice a vertex that is already parsed.
    b.  If we find a vertex that is already visited or we see a dead end, we backtrack to a vertex that has more branches.
    c.  We find out if a vertex is visited using "isVisited" flag.
    d.  We find out if a vertex has more edges connected by looking at adjacency matrix.
    e.  We use a stack to backtrack because it gives us the top item that was parsed recently.
    f.  Every visited vertex is marked as visited and pushed on to the stack.
    g.  The method returns when there are no vertices left to be parsed

****DFS Recursive:
    1.  This method needs the vertex that we are working on.
    2.  We mark the vertex as visited and we print it
    3.  We then get all the adjacent vertices to this vertex and loop over them.
    4.  We then call the dfs method on each vertex.

****An example of DFS is the MazeExploration problem. See MazeExploration.PNG
****Another example can be the magic wand tool of photo shop. THe wand tool does a DFS on all the adjacent vertices of the
    clicked vertex so they all get selected and color can be changed in the enclosed area.

6.  DFS is used for game simulation. Example is tic tac toe, in this game you start with 9 different squares. When you mark a square
    your opponent has 8 different choices and you have 7 different choices once he marks and the game goes on.

7.  Breadth first search(BFS):
    a.  Unlike DFS, BFS does not start going deep as long as there are more adjacent nodes to the current node. It first scans all the
        node at level1 then it goes to level 2 and so on.
    b.  BFS Rules:
        1.  Visit the next unvisited vertex adjascent to the current vertex, mark it and add it to the queue.
        2.  If you cannot carry on the rule 1 because there are no more unvisited vertices then remove a vertex from the queue and
            make the current vertex.
        3.  If you cannot carry out the rule 2 because the queue is empty then you are done.
        4.  We always print---> pop---> push adjacent.

8.  BFS is used for finding the shortest path to the node. By the time you reach the node using BFS, the path used is shortest path.


9.  Graph problems:
    a.  Euler Tour: A cycle that uses all the edges in a graph exactly once.

    b.  Hamiltonian Tour: A cycle that uses all the vertices in the graph exactly once.

    c.  Graph Isomorphism:  Two adjacency list represent the same graph.

    d.  Path: Sometimes we need to know the path between two vertices in graph, maybe two cities or 2 people
        in a social network.
    e.  Shortest Path:

    f.  If graph contains a cycle


--**Note that we can fine an Eular tour in a graph but there is no algorithm to find Hamiltonian tour.
--**Also there is no single way to find whether two graphs are isomorphic.
    





