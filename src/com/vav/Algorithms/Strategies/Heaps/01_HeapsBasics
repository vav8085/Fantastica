Heaps Basics:

1.  A heap is a complete binary tree.
2.  Its last row need not to be full.
3.  Its usually stored as an array.
4.  Its represented as a complete binary tree.
5.  The root is the maximum key.
6.  The heep condition: Every nodes key is larger than the key of its children.

Heaps are weekly ordered:

1.  In Binary Search Tree we know that the left child is smaller than root which is greater than right child.
    Because of this binary tree is easy to parse and search.
2.  In Heaps its difficult to search the nodes because the Heap Condition is not as helpful as BST.
3.  Heap traversal is also not as optimal and can take O(N) when parsing all the nodes to reach the required value.
4.  But the requirement is Fast Deletion of Maximum node(Root) and Fast Insertion on a new node and that is satisfied by Heap.

Removal of element:

1.  Removing a node is easy because its the node at the root.
2.  But once the root node is removed then the real challenge is to find its replacement.
3.  For this we will take the last node of the tree and put it at first nodes position
    The last node is also the last element in the array.
4.  The final step is to trickle the new root to its right position, for this we replace
    the root with the largest element on its left or right side.
5.  We keep doing the step 4 until the new root is at its right position.
6.  Removing the node decreases the size of the array by 1.

Few important things to know before adding, removing or changing the priority of an item in the heap:

1.  The parent of the current node is always at:
    parentPosition = (currentNodePosition - 1) / 2
    When adding a new node this is the (currentArraySize - 1) / 2

2.  Left child of a node is at:
    leftChildPosition = 2 * parentPosition + 1

3.  Right child of the node is at:
    rightChildPosition = 2 * parentPosition +2


Addition of item in a heap:

1.  Addition of an item is done by adding the item to the end of the heap.
2.  The end of the heap is the last element of the array.
3.  This item is then compared with the parent(that is found using formula above) and swapped until its at its right position.
4.  Know that we dont swap the nodes but just save the currentNode in a temp variable while swapping every parent to currentNodes new position
    creating a hole there.
5.  In last step when we do not have any parent node less than the current node key, we just insert temp node at the latest current node position.
6.  Using the hole method reduces the number of swap counts/
4.  The currentNode may or may not reach the root.

Removing an item from heap:

1.  Always the root of the tree that is also the first element of the array is removed.
2.  To replace its position we always move the last element of the tree to its position.
3.  Trickle Down starts here - We then save this element to a temp variable.
4.  We compare this temp with the largest child of current root( this is the root node in first iteration but changes later to largest element)
5.  If the largest child is less than the root we just exit the loop and assign temp node to this root(its a hole).
6.  If the largest child is greater than the root then we assign the largest child to the root creating a new hole at the largest child position.
    root pointer is also moved to the position of the largest child. We keep doing it until we reach condition 5 and exit the loop.

HeapSort:

1.  As we know that insert and remove both take nlogn time complexity for heaps.
2.  For heapsort we add these items to the heap and then remove them to get a sorted array.

****Important - Do not print out heap array thinking that its sorted. The heap array may have the items with values less
    than their parent at lower levels because the tree was like that. So it can be 100-90-80-30-40-70-60....How heapsort
    works is when both Insert and remove operations use trickleUp and trickleDown operations on new item added or
    an item deleted and then printed. The remove method will always return items in sorted order.




