Strings

1.  Java strings are not null terminated by default.
2.  charAt() is a function that can be used to parse string elements.

String Search:

String search is done when we want to know a string 'target' is appearing anywhere in our string str.
The brute force way of doing this is creating a sliding window and move it one character at a time over the
'str' array. The length of the sliding window will be of size equal to our target array 'target'.
    We will loop over the str to move our sliding window throughout str and then again loop over each element in our
    sliding window and compare it with target. The time complexity in success or failure case is m x n.

Rabin Karp String Search:

Using Rabin Karp's String search algorithm we can reduce the time complexity of failure cases. This algorithm uses a
hashcode which is generated for each new string in the window. if the hashcode of the string matches with the hashcode of
the target then only we match characters otherwise we consider that the strings dont match and we move the sliding window
ahead.
The hashcode is generated using following method:
    str = cartoon, target = arto
    Suppose string in sliding window is 'cart' then the hashcode is calculated as => c*x^3 + a*x^2 + r*x + t
    where x can be the number of characters in english or the closest prime or any other prime.
    ****For wrapping around we can also mod this with 26 or 27 if we want to hash them in 1-26 range.

So the hashcode for target and initial string in str can be generated using similar method used in atoi algorithm

x is some prime or it can be target.length also(in this case you should mod entire with some prime so there will be less collisions)
for(int i=0;i<target.length();i++){
    hash = hash * x + target.charAt(i); // each time the loop runs it multiplies previous digit with prime
                                                      // and adds next digit to it
}

Now this will return c*x^3 + a*x^2 + r*x + t = (if x=53)  -> 67 * 148877 + 65 * 2809 + 82 * 53 + 84

because the hashes wont match with target's hash which is a*x^3 + r*x^2 + t*x + o

we have to subtract c*x^3 from above hash and multiply remaining hash with x and add o to it so it becomes (a*x^2 + r*x + t)*x + o
This time the hash of the sliding window will be same as that of target. So now we can compare each character in them and
see if they match.

Notice that last step is important. Sometimes there are collisions and two different strings can have same hash. This is why
its important to compare both strings once their hashes match.




