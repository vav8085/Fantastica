Binary Trees:

1.  A binary tree has a node with either 0, 1 or 2 clild nodes.
2.  Strict--->A binary tree is a strict binary tree if its every nodes has either 0 or 2 children. It will either take 2 or none.
3.  Full----->A binary tree is full when every node has exactly 2 childs and all leaves are at same level.
4.  Complete->A binary tree is complete if its all nodes are at height h or h-1 and if we number each node from 1->n then
    there should be no missing number. Every level is complete except the last one.
5.  The number of nodes in a full binary tree is 2^(h+1) - 1
6.  The number of nodes in a complete binary tree is between 2^h and 2^(h+1) - 1
7.  The applications of binary tree can be an inventory, a family tree, something with a hierarchy and items at a certain level.

Binary Tree Structure:

1.  A binary tree has a data and two links pointing to each child node.

Why to use a binary tree:

*   The advantage of binary tree is that it has goods of both a sorted array and a linked list.
    You can search a tree very quickly like ordered array and you can also insert and delete quickly
    like a linked list.

Binary Tree search:
    To search an element in Binary tree we have to parse all nodes. We can use IOT,PROT or POOT or LOT. It will take o(n) time.
    We can also use graph searching algorithms like DFS/BFS.

****Note: Dont confuse this with Binary search tree where we have left child always smaller than parent and right greater
    than parent and O(nlog(n)) time complexity.

Binary tree operations: ( Not BST)

1. Binary tree has basically 4 operations:
    -Insert
    -Search
    -delete
    -traversing

    A.  Insertion:  An element can be inserted by traversing the tree and looking for left and right position of every node.
                    If you find an empty left/right position then fill it.
    B.  Searching:  Searching for a node can be done by doing Inorder, preorder or postorder traversal.
    C.  Deletion:
    D:  Parsing: Next topic


2.  Traversing:
    Binary tree can be traversed in 4 ways:
        A.  Preorder traversal
        B.  Inorder traversal
        C.  Postorder traversal


*   Preorder traversal:
    A.  In preorder traversal we visit the root node first.
    B.  For doing this we create a stack and push the root node on it.
    C.  Then we pop the root and print it.
    D.  We then go to its right node and push it onto the stack.
    E.  We then go to its left node and push it onto the stack.
    F.  We keep repeating the steps C,D and E until stack is empty.

*   Inorder Traversal:
    A.  In inorder traversal we start with the root node.
    B.  We iteratively push the root node to the stack and move to its left until we reach null.
    C.  Then we iteratively do below steps until stack is empty
        1.  We pop an element from the stack and print it and check if it has a right node.
        2.  If it has a right node we iteratively push that node and all its left nodes to the stack.

*   PostOrder Traversal:
    A.  Using 2 stacks
    B.  We can see that post order traversal is like reverse of preorder traversal.
    C.  We use two stacks here and start by pushing the root to the first stack.
    D.  We then use a loop and pop the top of the stack1 and push it to the stack 2 and at the same time we push the
        children of the element popped to the stack 1.
    E.  We keep doing the step D until stack 1 is empty.
    F.  In stack 2 we now have the data post ordered, we just use a loop and pop elements and print them one by one
        until stack is empty.

*   Level order traversal:
    A.  In level order traversal we use a queue instead of a stack.
    B.  We push the root to the queue and while queue is not empty we do below steps:
        1.  Dequeue an element from the queue and push it left and right children to queue if they are present.
        2.  Print the element that is dequeue.

